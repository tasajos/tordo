import {Component} from '@angular/core';
import {MatInputModule} from '@angular/material/input';
import {MatFormFieldModule} from '@angular/material/form-field';
import { FormGroup, FormControl, Validators, FormsModule } from '@angular/forms';
import { ScostosService } from '../../../Services/servcostos/scostos.service'; // Asegúrate de tener la ruta correcta
import { CostoFijo } from 'src/app/Interfaz/costos';
import { MatSnackBar } from '@angular/material/snack-bar';



@Component({
  selector: 'app-costosoperacionales',
  templateUrl: './costosoperacionales.component.html',
  styleUrls: ['./costosoperacionales.component.css']
})
export class CostosoperacionalesComponent {

  costoFijoForm = new FormGroup({
    concepto: new FormControl('', Validators.required),
    monto: new FormControl('', Validators.required),
    fechacostofijo: new FormControl('', Validators.required),


});

constructor(private scostosService: ScostosService,
  private snackBar: MatSnackBar
  
  ) { }

onSubmit() {
  if (this.costoFijoForm.valid) {
    const formValue = this.costoFijoForm.value;

    // Convertir valores del formulario asegurándose de que no son null o undefined
    const monto = formValue.monto != null ? parseFloat(formValue.monto) : 0;
    const fechacostofijo = formValue.fechacostofijo != null ? new Date(formValue.fechacostofijo) : new Date();

    // Asumiendo que la interfaz se llama CostoFijo (con C mayúscula)
    const costoFijo: CostoFijo = {
      // Omit the id if it is auto-generated by the backend
      concepto: formValue.concepto || '', // Fallback to empty string if null or undefined
      monto: isNaN(monto) ? 0 : monto, // Fallback to 0 if monto is NaN
      fechacostofijo: fechacostofijo,
    };

    this.scostosService.addcostofijo(costoFijo).subscribe({
      next: (costoFijo) => {
        console.log('Costo fijo registrado:', costoFijo);

        this.snackBar.open('Registro exitoso.', 'Cerrar', {
          duration: 2000,});
        // Reset the form or handle success
         // Reset the form to clear fields
         this.costoFijoForm.reset();
      },
      error: (error) => {
        console.error('Ocurrió un error:', error);
        this.snackBar.open('Ocurrió un error al registrar el costo fijo.', 'Cerrar', {
          duration: 2000,
        });
      },
    });
  }else {
    // If the form is not valid, you can alert the user to check their input
    alert('Por favor complete el formulario correctamente antes de enviar.');
}
}}